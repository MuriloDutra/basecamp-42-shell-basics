========== COMMANDS ==========

(clear) or (CTRL + L): it cleans the terminal

(mkdir): it creates a new directory/folder

(ls): It shows a list of content from the current folder

(ls -l): it shows folders and files

(ls -p): it shows folders and files

(pwd): it shows the current directory

(cd): it navigates to a directory
	EXAMPLES: cd myFolder

(cd ..): it returns to the above/earlier directory

(ls -la): it shows hidden folders and files

(rmdir): it deletes a directory. ONLY works if the folder is empty
	EXAMPLES:
		rmdir myFolder

(rm -rf): it deletes a file
	EXAMPLES:
		rm -rf myFile.txt
		rm -rf * //It will delete ALL files on the current folder

(echo): It writes an output
	EXAMPLES:
		echo Hello, how are you?
		echo yourMessageHere

(echo *): It filter files
	EXAMPLES:
		echo *.txt //It shows all files that are txt

(echo '*'): It prints '*'

(echo f???.txt): It filter files by an expression
	EXAMPLES:
		echo f???.txt
		echo f*.txt

(echo ~): It shows the initial path

(echo someTextHere > file.txt): It overrides the content of file.txt by 'someTextHere'

(echo someTextHere >> file.txt): It DOES NOT override the content of file.txt, just adds 'someTextHere'

(cat): It shows the content of a file
	EXAMPLES:
		cat file.txt
		cat -e file.txt //The option "-e" shows the lines break

(touch): It creates a new file
	EXAMPLES:
		touch myNewFile.txt

(touch -t): It changes the date of a file
	EXAMPLES: touch -t 201509191030 file.txt
	OBS: If the date it's six months before OR in the future of the current date, the hour does not appear

(sh): It opens a sub-shell

(env): It shows environment variables

(wc): It shows all files by a filter
	EXAMPLES:
		wc *.txt

(wc -l file.txt): It shows the number of lines in file.txt
	EXAMPLES:
		wc -l bigFile.txt

(wc -w file.txt): It shows the number of words in file.txt
	EXAMPLES:
		wc -w bigFile.txt

(wc -c file.txt): It shows the number of characters in file.txt
	EXAMPLES:
		wc -c bigFile.txt

(more bigFile.txt): It shows the content of the file, but paginated, to see the next page just press space-bar

(head -n 5 file.txt): It shows a specific number of the first lines from a file
	EXAMPLES:
		head -n 3 file.txt
		head -n 2 file.txt


(head -c 3 file.txt): It shows a specific number of the first characters from a file
	EXAMPLES:
		head -c 4 file.txt
		head -c 6 file.txt

(tail -n 3 file.txt): It shows a specific number of the last lines from a file
	EXAMPLES:
		head -n 4 file.txt
		head -n 6 file.txt

(tail -c 3 file.txt): It shows a specific number of the last characters from a file
	EXAMPLES:
		head -c 4 file.txt
		head -c 6 file.txt

(grep): It searches by a word in a file
	EXAMPLES:
		grep Hello file.txt //It searches the word 'Hello' in file.txt
		grep -v Hello file.txt //It searches the lines where THERE IS NOT the word 'Hello'
		grep -i HeLlO file.txt //It searches a word, but does not differentiate if it is UpperCase or LowerCase

(|): The pipe symbol allows to execute many commands one after another

(ls | grep): It filters a file based on what 'ls' returns
	EXAMPLES:
		ls | grep .txt

(ls > file.txt): It writes the output of 'ls' in a file
	OBS: If the file you choose has already a content, this content will be over override by the output of 'ls'

(ls fileThatDoesNotExist 2> error.log): It writes the error message in error.log 

(ls fileThatDoesNotExist 2> error.log | grep .txt > success.log): It writes the error message in error.log and success message in success.log

(cat success.log | grep .txt | wc -l): It shows the content of success.log, then searches by the expression '.txt' and then it counts how many of them are

(find . -name success.log): It finds a file by name in the current directory
	OBS: (.) means the current folder where you are

(find . -type d): It finds all directories in the current folder

(find . -maxdepth): It defines the depth of your search
	CONTEXT:
		firstFolder/myFile.txt
		firstFolder/mySecondFolder/hello.txt
	
	EXAMPLES:
		find . -maxdepth 1 //It prints 'firstFolder/myFile.txt'
		find . -maxdepth 2 //It prints 'firstFolder/mySecondFolder/hello.txt'

(bc): it's a calculator that you can use in the terminal
	EXAMPLES:
		7*5 //It prints 35
		4+6 //It prints 10
		z=10
		y=5
		z //It prints 10
		z+y //It prints 15
		a=z*y
		a // It prints 50

	OBS: type 'quit' when you're all done with math